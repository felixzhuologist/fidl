#include "c_generator.h"

#include "names.h"

namespace fidl {

namespace {

constexpr const char* kIndent = "    ";

CGenerator::Member EmptyStructMember() {
    return {
        .kind = flat::Type::Kind::kPrimitive,
        .type = NamePrimitiveCType(types::PrimitiveSubtype::kUint8),

        // Prepend the reserved uint8_t field with a single underscore, which is
        // for reserved identifiers (see ISO C standard, section 7.1.3
        // <http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf>).
        .name = "_reserved",
    };
}

void EmitFileComment(std::ostream* file) {
    *file << "// WARNING: This file is machine generated by fidlc.\n\n";
}

void EmitHeaderGuard(std::ostream* file) {
    *file << "#pragma once\n";
}

void EmitIncludeHeader(std::ostream* file, StringView header) {
    *file << "#include " << std::string(header) << "\n";
}

void EmitBeginExternC(std::ostream* file) {
    *file << "#if defined(__cplusplus)\nextern \"C\" {\n#endif\n";
}

void EmitEndExternC(std::ostream* file) {
    *file << "#if defined(__cplusplus)\n}\n#endif\n";
}

void EmitBlank(std::ostream* file) {
    *file << "\n";
}

void EmitMemberDecl(std::ostream* file, const CGenerator::Member& member) {
    *file << member.type << " " << member.name;
    for (uint32_t array_count : member.array_counts) {
        *file << "[" << array_count << "]";
    }
}

void BitsValue(const flat::Constant* constant, std::string* out_value) {
    std::ostringstream member_value;

    const flat::ConstantValue& const_val = constant->Value();
    switch (const_val.kind) {
    case flat::ConstantValue::Kind::kUint8: {
        auto value = static_cast<const flat::NumericConstantValue<uint8_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kUint16: {
        auto value = static_cast<const flat::NumericConstantValue<uint16_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kUint32: {
        auto value = static_cast<const flat::NumericConstantValue<uint32_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kUint64: {
        auto value = static_cast<const flat::NumericConstantValue<uint64_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kInt8:
    case flat::ConstantValue::Kind::kInt16:
    case flat::ConstantValue::Kind::kInt32:
    case flat::ConstantValue::Kind::kInt64:
    case flat::ConstantValue::Kind::kBool:
    case flat::ConstantValue::Kind::kFloat32:
    case flat::ConstantValue::Kind::kFloat64:
    case flat::ConstantValue::Kind::kString:
        assert(false && "bad primitive type for a bits declaration");
        break;
    }

    *out_value = member_value.str();
}

void EnumValue(const flat::Constant* constant, std::string* out_value) {
    std::ostringstream member_value;

    const flat::ConstantValue& const_val = constant->Value();
    switch (const_val.kind) {
    case flat::ConstantValue::Kind::kInt8: {
        auto value = static_cast<const flat::NumericConstantValue<int8_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kInt16: {
        auto value = static_cast<const flat::NumericConstantValue<int16_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kInt32: {
        auto value = static_cast<const flat::NumericConstantValue<int32_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kInt64: {
        auto value = static_cast<const flat::NumericConstantValue<int64_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kUint8: {
        auto value = static_cast<const flat::NumericConstantValue<uint8_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kUint16: {
        auto value = static_cast<const flat::NumericConstantValue<uint16_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kUint32: {
        auto value = static_cast<const flat::NumericConstantValue<uint32_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kUint64: {
        auto value = static_cast<const flat::NumericConstantValue<uint64_t>&>(const_val);
        member_value << value;
        break;
    }
    case flat::ConstantValue::Kind::kBool:
    case flat::ConstantValue::Kind::kFloat32:
    case flat::ConstantValue::Kind::kFloat64:
    case flat::ConstantValue::Kind::kString:
        assert(false && "bad primitive type for an enum");
        break;
    }

    *out_value = member_value.str();
}

flat::Decl::Kind GetDeclKind(const flat::Library* library, const flat::Type* type) {
    if (type->kind != flat::Type::Kind::kIdentifier)
        return flat::Decl::Kind::kConst;
    auto identifier_type = static_cast<const flat::IdentifierType*>(type);
    auto named_decl = library->LookupDeclByName(identifier_type->name);
    assert(named_decl && "library must contain declaration");
    return named_decl->kind;
}

void ArrayCountsAndElementTypeName(
    const flat::Library* library,
    const flat::Type* type,
    std::vector<uint32_t>* out_array_counts,
    std::string* out_element_type_name) 
{
    std::vector<uint32_t> array_counts;
    for (;;) {
        switch (type->kind) {
        default: {
            *out_array_counts = array_counts;
            // TODO: this is repeated logic
            *out_element_type_name = NameFlatCType(type, GetDeclKind(library, type));
            return;
        }
        case flat::Type::Kind::kArray: {
            auto array_type = static_cast<const flat::ArrayType*>(type);
            array_counts.push_back(array_type->element_count->value);
            type = array_type->element_type;
            continue;
        }
        }
    }
}

template <typename T>
CGenerator::Member CreateMember(const flat::Library* library, const T& decl) {
    const flat::Type* type = decl.type_ctor->type;

    std::string element_type_name;
    std::vector<uint32_t> array_counts;
    types::Nullability nullability = types::Nullability::kNonnullable;
    uint32_t max_num_elements = std::numeric_limits<uint32_t>::max();
    switch(type->kind) {
    case flat::Type::Kind::kArray: {
        ArrayCountsAndElementTypeName(
            library, type, &array_counts, &element_type_name);
        break;
    case flat::Type::Kind::kVector: {
        auto vector_type = static_cast<const flat::VectorType*>(type);
        const auto element_type = vector_type->element_type;
        element_type_name =
            NameFlatCType(element_type, GetDeclKind(library, element_type));
        max_num_elements = vector_type->element_count->value;
        break;
    }
    case flat::Type::Kind::kIdentifier: {
        auto identifier_type = static_cast<const flat::IdentifierType*>(type);
        nullability = identifier_type->nullability;
        break;
    }
    case flat::Type::Kind::kString: {
        auto string_type = static_cast<const flat::StringType*>(type);
        nullability = string_type->nullability;
        max_num_elements = string_type->max_size->value;
        break;
    }
    case flat::Type::Kind::kHandle:
    case flat::Type::Kind::kPrimitive:
        break;
    }
    }

    auto decl_kind = GetDeclKind(library, type);
    auto type_name = NameFlatCType(type, decl_kind);
    std::string name = NameIdentifier(decl.name);
    return CGenerator::Member{
        type->kind,
        decl_kind,
        std::move(type_name),
        std::move(name),
        std::move(element_type_name),
        std::move(array_counts),
        nullability,
        max_num_elements,
    };
}

std::vector<CGenerator::Member>
GenerateMembers(const flat::Library* library,
                const std::vector<flat::Union::Member>& union_members) {
    std::vector<CGenerator::Member> members;
    members.reserve(union_members.size());
    for (const auto& member : union_members) {
        members.push_back(CreateMember(library, member));
    }
    return members;
}

std::vector<CGenerator::Member>
GenerateMembers(const flat::Library* library,
                const std::vector<flat::XUnion::Member>& xunion_members) {
    std::vector<CGenerator::Member> members;
    members.reserve(xunion_members.size());
    for (const auto& xunion_member : xunion_members) {
        members.push_back(CreateMember(library, xunion_member));
    }
    return members;
}

} // namespace

void CGenerator::GeneratePrologues() {
    EmitFileComment(&file_);
    EmitHeaderGuard(&file_);
    EmitIncludeHeader(&file_, "<stdalign.h>");
    EmitIncludeHeader(&file_, "<stdbool.h>");
    EmitIncludeHeader(&file_, "<stdint.h>");
    EmitIncludeHeader(&file_, "<zircon/fidl.h>");
    EmitIncludeHeader(&file_, "<zircon/syscalls/object.h>");
    EmitIncludeHeader(&file_, "<zircon/types.h>");

    std::set<std::string> add_includes;
    for (const auto& dep_library : library_->dependencies()) {
        if (dep_library == library_)
            continue;
        if (dep_library->HasAttribute("Internal"))
            continue;
        add_includes.insert(NameLibraryCHeader(dep_library->name()));
    }
    for (const auto& include : add_includes) {
        EmitIncludeHeader(&file_, "<" + include + ">");
    }
    EmitBlank(&file_);
    EmitBeginExternC(&file_);
    EmitBlank(&file_);
}

void CGenerator::GenerateEpilogues() {
    EmitEndExternC(&file_);
}

void CGenerator::GenerateIntegerDefine(StringView name, types::PrimitiveSubtype subtype, StringView value) {
    std::string literal_macro = NamePrimitiveIntegerCConstantMacro(subtype);
    file_ << "#define " << std::string(name) << " " << literal_macro << "(" << std::string(value) << ")\n";
}

void CGenerator::GeneratePrimitiveDefine(StringView name, types::PrimitiveSubtype subtype,
                                         StringView value) {
    switch (subtype) {
    case types::PrimitiveSubtype::kInt8:
    case types::PrimitiveSubtype::kInt16:
    case types::PrimitiveSubtype::kInt32:
    case types::PrimitiveSubtype::kInt64:
    case types::PrimitiveSubtype::kUint8:
    case types::PrimitiveSubtype::kUint16:
    case types::PrimitiveSubtype::kUint32:
    case types::PrimitiveSubtype::kUint64: {
        std::string literal_macro = NamePrimitiveIntegerCConstantMacro(subtype);
        file_ << "#define " << std::string(name) << " " << std::string(literal_macro) << "(" << std::string(value) << ")\n";
        break;
    }
    case types::PrimitiveSubtype::kBool:
    case types::PrimitiveSubtype::kFloat32:
    case types::PrimitiveSubtype::kFloat64: {
        file_ << "#define " << std::string(name) << " "
              << "(" << std::string(value) << ")\n";
        break;
    }
    default:
        break;
    }
}

void CGenerator::GenerateStringDefine(StringView name, StringView value) {
    file_ << "#define " << std::string(name) << " " << std::string(value) << "\n";
}

void CGenerator::GenerateIntegerTypedef(types::PrimitiveSubtype subtype, StringView name) {
    std::string underlying_type = NamePrimitiveCType(subtype);
    file_ << "typedef " << underlying_type << " " << std::string(name) << ";\n";
}

void CGenerator::GenerateStructTypedef(StringView name) {
    file_ << "typedef struct " << std::string(name) << " " << std::string(name) << ";\n";
}

void CGenerator::GenerateStructDeclaration(StringView name, const std::vector<Member>& members, StructKind kind) {
    file_ << "struct " << std::string(name) << " {\n";
    if (kind == StructKind::kMessage) {
        // ??
        file_ << kIndent << "FIDL_ALIGNDECL\n";
    }

    auto emit_member = [this](const Member& member) {
        file_ << kIndent;
        EmitMemberDecl(&file_, member);
        file_ << ";\n";
    };

    for (const auto& member : members) {
        emit_member(member);
    }

    if (members.empty()) {
        emit_member(EmptyStructMember());
    }

    file_ << "};\n";
}

void CGenerator::GenerateTaggedUnionDeclaration(StringView name, const std::vector<Member>& members) {
    file_ << "struct " << std::string(name) << " {\n";
    file_ << kIndent << "fidl_union_tag_t tag;\n";
    file_ << kIndent << "union {\n";
    for (const auto& member : members) {
        file_ << kIndent << kIndent;
        EmitMemberDecl(&file_, member);
        file_ << ";\n";
    }
    file_ << kIndent << "};\n";
    file_ << "};\n";
}

void CGenerator::GenerateTaggedXUnionDeclaration(StringView name,
                                                 const std::vector<Member>& members) {
    // XUnions are (intentionally) unimplemented for C bindings.
}

std::map<const flat::Decl*, CGenerator::NamedBits>
CGenerator::NameBits(const std::vector<std::unique_ptr<flat::Bits>>& bits_infos) {
    std::map<const flat::Decl*, NamedBits> named_bits;
    for (const auto& bits_info : bits_infos) {
        std::string bits_name = NameName(bits_info->name, "_", "_");
        named_bits.emplace(bits_info.get(), NamedBits{std::move(bits_name), *bits_info});
    }
    return named_bits;
}

std::map<const flat::Decl*, CGenerator::NamedConst>
CGenerator::NameConsts(const std::vector<std::unique_ptr<flat::Const>>& const_infos) {
    std::map<const flat::Decl*, NamedConst> named_consts;
    for (const auto& const_info : const_infos) {
        named_consts.emplace(const_info.get(), NamedConst{NameName(const_info->name, "_", "_"), *const_info});
    }
    return named_consts;
}

std::map<const flat::Decl*, CGenerator::NamedEnum>
CGenerator::NameEnums(const std::vector<std::unique_ptr<flat::Enum>>& enum_infos) {
    std::map<const flat::Decl*, NamedEnum> named_enums;
    for (const auto& enum_info : enum_infos) {
        std::string enum_name = NameName(enum_info->name, "_", "_");
        named_enums.emplace(enum_info.get(), NamedEnum{std::move(enum_name), *enum_info});
    }
    return named_enums;
}

std::map<const flat::Decl*, CGenerator::NamedStruct>
CGenerator::NameStructs(const std::vector<std::unique_ptr<flat::Struct>>& struct_infos) {
    std::map<const flat::Decl*, NamedStruct> named_structs;
    for (const auto& struct_info : struct_infos) {
        if (struct_info->anonymous)
            continue;
        std::string c_name = NameName(struct_info->name, "_", "_");
        std::string coded_name = c_name + "Coded";
        named_structs.emplace(
            struct_info.get(),
            NamedStruct{
                std::move(c_name),
                std::move(coded_name),
                *struct_info
            });
    }
    return named_structs;
}

std::map<const flat::Decl*, CGenerator::NamedTable>
CGenerator::NameTables(const std::vector<std::unique_ptr<flat::Table>>& table_infos) {
    std::map<const flat::Decl*, NamedTable> named_tables;
    for (const auto& table_info : table_infos) {
        std::string c_name = NameName(table_info->name, "_", "_");
        std::string coded_name = c_name + "Coded";
        named_tables.emplace(table_info.get(),
                             NamedTable{std::move(c_name), std::move(coded_name), *table_info});
    }
    return named_tables;
}

std::map<const flat::Decl*, CGenerator::NamedUnion>
CGenerator::NameUnions(const std::vector<std::unique_ptr<flat::Union>>& union_infos) {
    std::map<const flat::Decl*, NamedUnion> named_unions;
    for (const auto& union_info : union_infos) {
        std::string union_name = NameName(union_info->name, "_", "_");
        named_unions.emplace(
            union_info.get(),
            NamedUnion{
                std::move(union_name),
                *union_info
            });
    }
    return named_unions;
}

std::map<const flat::Decl*, CGenerator::NamedXUnion>
CGenerator::NameXUnions(const std::vector<std::unique_ptr<flat::XUnion>>& xunion_infos) {
    std::map<const flat::Decl*, NamedXUnion> named_xunions;
    for (const auto& xunion_info : xunion_infos) {
        std::string xunion_name = NameName(xunion_info->name, "_", "_");
        named_xunions.emplace(xunion_info.get(), NamedXUnion{std::move(xunion_name), *xunion_info});
    }
    return named_xunions;
}

void CGenerator::ProduceBitsForwardDeclaration(const NamedBits& named_bits) {
    auto subtype = static_cast<const flat::PrimitiveType*>(named_bits.bits_info.subtype_ctor->type)->subtype;
    GenerateIntegerTypedef(subtype, named_bits.name);
    for (const auto& member : named_bits.bits_info.members) {
        std::string member_name = named_bits.name + "_" + NameIdentifier(member.name);
        std::string member_value;
        BitsValue(member.value.get(), &member_value);
        GenerateIntegerDefine(member_name, subtype, std::move(member_value));
    }
    EmitBlank(&file_);
}

void CGenerator::ProduceConstForwardDeclaration(const NamedConst& named_const) {

}

void CGenerator::ProduceEnumForwardDeclaration(const NamedEnum& named_enum) {
    types::PrimitiveSubtype subtype = named_enum.enum_info.type->subtype;
    GenerateIntegerTypedef(subtype, named_enum.name);
    for (const auto& member : named_enum.enum_info.members) {
        std::string member_name = named_enum.name + "_" + NameIdentifier(member.name);
        std::string member_value;
        EnumValue(member.value.get(), &member_value);
        GenerateIntegerDefine(member_name, subtype, std::move(member_value));
    }
    EmitBlank(&file_);
}

void CGenerator::ProduceStructForwardDeclaration(const NamedStruct& named_struct) {
    GenerateStructTypedef(named_struct.c_name);
}

void CGenerator::ProduceTableForwardDeclaration(const NamedTable& named_table) {
    GenerateStructTypedef(named_table.c_name);
}

void CGenerator::ProduceUnionForwardDeclaration(const NamedUnion& named_union) {
    GenerateStructTypedef(named_union.name);
}

void CGenerator::ProduceXUnionForwardDeclaration(const NamedXUnion& named_xunion) {
    GenerateStructTypedef(named_xunion.name);
}

void CGenerator::ProduceConstDeclaration(const NamedConst& named_const) {
    const flat::Const& ci = named_const.const_info;

    if (ci.value->kind != flat::Constant::Kind::kLiteral) {
        return;
    }

    switch (ci.type_ctor->type->kind) {
    case flat::Type::Kind::kPrimitive:
        GeneratePrimitiveDefine(
            named_const.name,
            static_cast<const flat::PrimitiveType*>(ci.type_ctor->type)->subtype,
            static_cast<flat::LiteralConstant*>(ci.value.get())->literal->location().data());
        break;
    case flat::Type::Kind::kString:
        GenerateStringDefine(
            named_const.name,
            static_cast<flat::LiteralConstant*>(ci.value.get())->literal->location().data());
        break;
    default:
        break;
    }

    EmitBlank(&file_);
}

void CGenerator::ProduceStructDeclaration(const NamedStruct& named_struct) {
    std::vector<CGenerator::Member> members;
    members.reserve(named_struct.struct_info.members.size());
    for (const auto& struct_member : named_struct.struct_info.members) {
        members.push_back(CreateMember(library_, struct_member));
    }

    GenerateStructDeclaration(named_struct.c_name, members, StructKind::kNonmessage);

    EmitBlank(&file_);
}

void CGenerator::ProduceUnionDeclaration(const NamedUnion& named_union) {
    std::vector<CGenerator::Member> members =
        GenerateMembers(library_, named_union.union_info.members);
    GenerateTaggedUnionDeclaration(named_union.name, members);

    uint32_t tag = 0u;
    for (const auto& member : named_union.union_info.members) {
        std::string tag_name = NameUnionTag(named_union.name, member);
        std::ostringstream value;
        value << tag;
        GenerateIntegerDefine(
            std::move(tag_name),
            types::PrimitiveSubtype::kUint32,
            value.str());
        ++tag;
    }

    EmitBlank(&file_);
}

void CGenerator::ProduceXUnionDeclaration(const NamedXUnion& named_xunion) {
    std::vector<CGenerator::Member> members =
        GenerateMembers(library_, named_xunion.xunion_info.members);
    GenerateTaggedXUnionDeclaration(named_xunion.name, members);

    uint32_t tag = 0u;
    for (const auto& member : named_xunion.xunion_info.members) {
        std::string tag_name = NameXUnionTag(named_xunion.name, member);
        std::ostringstream value;
        value << tag;
        GenerateIntegerDefine(
            std::move(tag_name),
            types::PrimitiveSubtype::kUint32,
            value.str());
        ++tag;
    }

    EmitBlank(&file_);
}


std::ostringstream CGenerator::ProduceHeader() {
    GeneratePrologues();

    std::map<const flat::Decl*, NamedBits> named_bits = NameBits(library_->bits_declarations_);
    std::map<const flat::Decl*, NamedConst> named_consts =
        NameConsts(library_->const_declarations_);
    std::map<const flat::Decl*, NamedEnum> named_enums = NameEnums(library_->enum_declarations_);
    std::map<const flat::Decl*, NamedStruct> named_structs = NameStructs(library_->struct_declarations_);
    std::map<const flat::Decl*, NamedTable> named_tables = NameTables(
        library_->table_declarations_);
    std::map<const flat::Decl*, NamedUnion> named_unions =
        NameUnions(library_->union_declarations_);
    std::map<const flat::Decl*, NamedXUnion> named_xunions =
        NameXUnions(library_->xunion_declarations_);

    file_ << "\n// Forward declarations\n\n";
    for (const auto* decl : library_->declaration_order_) {
        switch (decl->kind) {
        case flat::Decl::Kind::kBits: {
            auto iter = named_bits.find(decl);
            // when would this ever happen? shouldn't this be an error
            if (iter != named_bits.end()) {
                ProduceBitsForwardDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kConst: {
            auto iter = named_consts.find(decl);
            if (iter != named_consts.end()) {
                ProduceConstForwardDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kEnum: {
            auto iter = named_enums.find(decl);
            if (iter != named_enums.end()) {
                ProduceEnumForwardDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kStruct: {
            auto iter = named_structs.find(decl);
            if (iter != named_structs.end()) {
                ProduceStructForwardDeclaration(iter->second);
            }
        }
        case flat::Decl::Kind::kTable: {
            auto iter = named_tables.find(decl);
            if (iter != named_tables.end()) {
                ProduceTableForwardDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kUnion: {
            auto iter = named_unions.find(decl);
            if (iter != named_unions.end()) {
                ProduceUnionForwardDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kXUnion: {
            auto iter = named_xunions.find(decl);
            if (iter != named_xunions.end()) {
                ProduceXUnionForwardDeclaration(iter->second);
            }
            break;
        }
        default:
            break;
        }
    }

    file_ << "\n// Declarations\n\n";
    for (const auto* decl : library_->declaration_order_) {
        switch (decl->kind) {
        case flat::Decl::Kind::kBits:
            // Bits can be entirely forward declared, as they have no
            // dependencies other than standard headers.
            break;
        case flat::Decl::Kind::kConst: {
            auto iter = named_consts.find(decl);
            if (iter != named_consts.end()) {
                ProduceConstDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kEnum:
            // Enums can be entirely forward declared, as they have no
            // dependencies other than standard headers.
            break;
        case flat::Decl::Kind::kStruct: {
            auto iter = named_structs.find(decl);
            if (iter != named_structs.end()) {
                ProduceStructDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kTable:
            // Tables are entirely forward declared, and their body is defined only in
            // implementation files.
            break;
            case flat::Decl::Kind::kUnion: {
            auto iter = named_unions.find(decl);
            if (iter != named_unions.end()) {
                ProduceUnionDeclaration(iter->second);
            }
            break;
        }
        case flat::Decl::Kind::kXUnion: {
            auto iter = named_xunions.find(decl);
            if (iter != named_xunions.end()) {
                ProduceXUnionDeclaration(iter->second);
            }
            break;
        }
        default:
            break;
        }
    }

    GenerateEpilogues();

    return std::move(file_);
}

} // namespcae fidl
